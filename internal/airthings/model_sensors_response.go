/*
Airthings for Consumer API

The Airthings for Consumer API provides secure and authorized access for Airthings consumers to retrieve the latest data from their Airthings air quality monitors. Leveraging HTTPS and OAuth for enhanced security, this API empowers users to seamlessly access real-time information from their Airthings devices, gaining valuable insights into the air quality within their environments.

API version: 1.0.0
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airthings

import (
	"encoding/json"
)

// checks if the SensorsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorsResponse{}

// SensorsResponse struct for SensorsResponse
type SensorsResponse struct {
	SerialNumber *string `json:"serialNumber,omitempty"`
	Sensors []SensorResponse `json:"sensors,omitempty"`
	Recorded NullableString `json:"recorded,omitempty"`
	BatteryPercentage NullableInt32 `json:"batteryPercentage,omitempty"`
}

// NewSensorsResponse instantiates a new SensorsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorsResponse() *SensorsResponse {
	this := SensorsResponse{}
	return &this
}

// NewSensorsResponseWithDefaults instantiates a new SensorsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorsResponseWithDefaults() *SensorsResponse {
	this := SensorsResponse{}
	return &this
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *SensorsResponse) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorsResponse) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *SensorsResponse) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *SensorsResponse) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSensors returns the Sensors field value if set, zero value otherwise.
func (o *SensorsResponse) GetSensors() []SensorResponse {
	if o == nil || IsNil(o.Sensors) {
		var ret []SensorResponse
		return ret
	}
	return o.Sensors
}

// GetSensorsOk returns a tuple with the Sensors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorsResponse) GetSensorsOk() ([]SensorResponse, bool) {
	if o == nil || IsNil(o.Sensors) {
		return nil, false
	}
	return o.Sensors, true
}

// HasSensors returns a boolean if a field has been set.
func (o *SensorsResponse) HasSensors() bool {
	if o != nil && !IsNil(o.Sensors) {
		return true
	}

	return false
}

// SetSensors gets a reference to the given []SensorResponse and assigns it to the Sensors field.
func (o *SensorsResponse) SetSensors(v []SensorResponse) {
	o.Sensors = v
}

// GetRecorded returns the Recorded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SensorsResponse) GetRecorded() string {
	if o == nil || IsNil(o.Recorded.Get()) {
		var ret string
		return ret
	}
	return *o.Recorded.Get()
}

// GetRecordedOk returns a tuple with the Recorded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SensorsResponse) GetRecordedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recorded.Get(), o.Recorded.IsSet()
}

// HasRecorded returns a boolean if a field has been set.
func (o *SensorsResponse) HasRecorded() bool {
	if o != nil && o.Recorded.IsSet() {
		return true
	}

	return false
}

// SetRecorded gets a reference to the given NullableString and assigns it to the Recorded field.
func (o *SensorsResponse) SetRecorded(v string) {
	o.Recorded.Set(&v)
}
// SetRecordedNil sets the value for Recorded to be an explicit nil
func (o *SensorsResponse) SetRecordedNil() {
	o.Recorded.Set(nil)
}

// UnsetRecorded ensures that no value is present for Recorded, not even an explicit nil
func (o *SensorsResponse) UnsetRecorded() {
	o.Recorded.Unset()
}

// GetBatteryPercentage returns the BatteryPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SensorsResponse) GetBatteryPercentage() int32 {
	if o == nil || IsNil(o.BatteryPercentage.Get()) {
		var ret int32
		return ret
	}
	return *o.BatteryPercentage.Get()
}

// GetBatteryPercentageOk returns a tuple with the BatteryPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SensorsResponse) GetBatteryPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatteryPercentage.Get(), o.BatteryPercentage.IsSet()
}

// HasBatteryPercentage returns a boolean if a field has been set.
func (o *SensorsResponse) HasBatteryPercentage() bool {
	if o != nil && o.BatteryPercentage.IsSet() {
		return true
	}

	return false
}

// SetBatteryPercentage gets a reference to the given NullableInt32 and assigns it to the BatteryPercentage field.
func (o *SensorsResponse) SetBatteryPercentage(v int32) {
	o.BatteryPercentage.Set(&v)
}
// SetBatteryPercentageNil sets the value for BatteryPercentage to be an explicit nil
func (o *SensorsResponse) SetBatteryPercentageNil() {
	o.BatteryPercentage.Set(nil)
}

// UnsetBatteryPercentage ensures that no value is present for BatteryPercentage, not even an explicit nil
func (o *SensorsResponse) UnsetBatteryPercentage() {
	o.BatteryPercentage.Unset()
}

func (o SensorsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.Sensors) {
		toSerialize["sensors"] = o.Sensors
	}
	if o.Recorded.IsSet() {
		toSerialize["recorded"] = o.Recorded.Get()
	}
	if o.BatteryPercentage.IsSet() {
		toSerialize["batteryPercentage"] = o.BatteryPercentage.Get()
	}
	return toSerialize, nil
}

type NullableSensorsResponse struct {
	value *SensorsResponse
	isSet bool
}

func (v NullableSensorsResponse) Get() *SensorsResponse {
	return v.value
}

func (v *NullableSensorsResponse) Set(val *SensorsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorsResponse(val *SensorsResponse) *NullableSensorsResponse {
	return &NullableSensorsResponse{value: val, isSet: true}
}

func (v NullableSensorsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


