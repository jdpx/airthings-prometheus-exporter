/*
Airthings for Consumer API

The Airthings for Consumer API provides secure and authorized access for Airthings consumers to retrieve the latest data from their Airthings air quality monitors. Leveraging HTTPS and OAuth for enhanced security, this API empowers users to seamlessly access real-time information from their Airthings devices, gaining valuable insights into the air quality within their environments.

API version: 1.0.0
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airthings

import (
	"encoding/json"
)

// checks if the GetMultipleSensors200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMultipleSensors200Response{}

// GetMultipleSensors200Response struct for GetMultipleSensors200Response
type GetMultipleSensors200Response struct {
	Results []SensorsResponse `json:"results,omitempty"`
	// True if next pages can be fetched, false otherwise.
	HasNext *bool `json:"hasNext,omitempty"`
	TotalPages *int32 `json:"totalPages,omitempty"`
}

// NewGetMultipleSensors200Response instantiates a new GetMultipleSensors200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMultipleSensors200Response() *GetMultipleSensors200Response {
	this := GetMultipleSensors200Response{}
	return &this
}

// NewGetMultipleSensors200ResponseWithDefaults instantiates a new GetMultipleSensors200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMultipleSensors200ResponseWithDefaults() *GetMultipleSensors200Response {
	this := GetMultipleSensors200Response{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *GetMultipleSensors200Response) GetResults() []SensorsResponse {
	if o == nil || IsNil(o.Results) {
		var ret []SensorsResponse
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMultipleSensors200Response) GetResultsOk() ([]SensorsResponse, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *GetMultipleSensors200Response) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []SensorsResponse and assigns it to the Results field.
func (o *GetMultipleSensors200Response) SetResults(v []SensorsResponse) {
	o.Results = v
}

// GetHasNext returns the HasNext field value if set, zero value otherwise.
func (o *GetMultipleSensors200Response) GetHasNext() bool {
	if o == nil || IsNil(o.HasNext) {
		var ret bool
		return ret
	}
	return *o.HasNext
}

// GetHasNextOk returns a tuple with the HasNext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMultipleSensors200Response) GetHasNextOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNext) {
		return nil, false
	}
	return o.HasNext, true
}

// HasHasNext returns a boolean if a field has been set.
func (o *GetMultipleSensors200Response) HasHasNext() bool {
	if o != nil && !IsNil(o.HasNext) {
		return true
	}

	return false
}

// SetHasNext gets a reference to the given bool and assigns it to the HasNext field.
func (o *GetMultipleSensors200Response) SetHasNext(v bool) {
	o.HasNext = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *GetMultipleSensors200Response) GetTotalPages() int32 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMultipleSensors200Response) GetTotalPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *GetMultipleSensors200Response) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int32 and assigns it to the TotalPages field.
func (o *GetMultipleSensors200Response) SetTotalPages(v int32) {
	o.TotalPages = &v
}

func (o GetMultipleSensors200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMultipleSensors200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.HasNext) {
		toSerialize["hasNext"] = o.HasNext
	}
	if !IsNil(o.TotalPages) {
		toSerialize["totalPages"] = o.TotalPages
	}
	return toSerialize, nil
}

type NullableGetMultipleSensors200Response struct {
	value *GetMultipleSensors200Response
	isSet bool
}

func (v NullableGetMultipleSensors200Response) Get() *GetMultipleSensors200Response {
	return v.value
}

func (v *NullableGetMultipleSensors200Response) Set(val *GetMultipleSensors200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMultipleSensors200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMultipleSensors200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMultipleSensors200Response(val *GetMultipleSensors200Response) *NullableGetMultipleSensors200Response {
	return &NullableGetMultipleSensors200Response{value: val, isSet: true}
}

func (v NullableGetMultipleSensors200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMultipleSensors200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


