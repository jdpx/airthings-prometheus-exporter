/*
Airthings for Consumer API

The Airthings for Consumer API provides secure and authorized access for Airthings consumers to retrieve the latest data from their Airthings air quality monitors. Leveraging HTTPS and OAuth for enhanced security, this API empowers users to seamlessly access real-time information from their Airthings devices, gaining valuable insights into the air quality within their environments.

API version: 1.0.0
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airthings

import (
	"encoding/json"
)

// checks if the SensorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorResponse{}

// SensorResponse struct for SensorResponse
type SensorResponse struct {
	SensorType *string `json:"sensorType,omitempty"`
	Value *float64 `json:"value,omitempty"`
	Unit *string `json:"unit,omitempty"`
}

// NewSensorResponse instantiates a new SensorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorResponse() *SensorResponse {
	this := SensorResponse{}
	return &this
}

// NewSensorResponseWithDefaults instantiates a new SensorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorResponseWithDefaults() *SensorResponse {
	this := SensorResponse{}
	return &this
}

// GetSensorType returns the SensorType field value if set, zero value otherwise.
func (o *SensorResponse) GetSensorType() string {
	if o == nil || IsNil(o.SensorType) {
		var ret string
		return ret
	}
	return *o.SensorType
}

// GetSensorTypeOk returns a tuple with the SensorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorResponse) GetSensorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SensorType) {
		return nil, false
	}
	return o.SensorType, true
}

// HasSensorType returns a boolean if a field has been set.
func (o *SensorResponse) HasSensorType() bool {
	if o != nil && !IsNil(o.SensorType) {
		return true
	}

	return false
}

// SetSensorType gets a reference to the given string and assigns it to the SensorType field.
func (o *SensorResponse) SetSensorType(v string) {
	o.SensorType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SensorResponse) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorResponse) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SensorResponse) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *SensorResponse) SetValue(v float64) {
	o.Value = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *SensorResponse) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorResponse) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *SensorResponse) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *SensorResponse) SetUnit(v string) {
	o.Unit = &v
}

func (o SensorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SensorType) {
		toSerialize["sensorType"] = o.SensorType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableSensorResponse struct {
	value *SensorResponse
	isSet bool
}

func (v NullableSensorResponse) Get() *SensorResponse {
	return v.value
}

func (v *NullableSensorResponse) Set(val *SensorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorResponse(val *SensorResponse) *NullableSensorResponse {
	return &NullableSensorResponse{value: val, isSet: true}
}

func (v NullableSensorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


