/*
Airthings for Consumer API

The Airthings for Consumer API provides secure and authorized access for Airthings consumers to retrieve the latest data from their Airthings air quality monitors. Leveraging HTTPS and OAuth for enhanced security, this API empowers users to seamlessly access real-time information from their Airthings devices, gaining valuable insights into the air quality within their environments.

API version: 1.0.0
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airthings

import (
	"encoding/json"
)

// checks if the AccountsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountsResponse{}

// AccountsResponse struct for AccountsResponse
type AccountsResponse struct {
	Accounts []AccountResponse `json:"accounts,omitempty"`
}

// NewAccountsResponse instantiates a new AccountsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountsResponse() *AccountsResponse {
	this := AccountsResponse{}
	return &this
}

// NewAccountsResponseWithDefaults instantiates a new AccountsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountsResponseWithDefaults() *AccountsResponse {
	this := AccountsResponse{}
	return &this
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *AccountsResponse) GetAccounts() []AccountResponse {
	if o == nil || IsNil(o.Accounts) {
		var ret []AccountResponse
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountsResponse) GetAccountsOk() ([]AccountResponse, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *AccountsResponse) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []AccountResponse and assigns it to the Accounts field.
func (o *AccountsResponse) SetAccounts(v []AccountResponse) {
	o.Accounts = v
}

func (o AccountsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	return toSerialize, nil
}

type NullableAccountsResponse struct {
	value *AccountsResponse
	isSet bool
}

func (v NullableAccountsResponse) Get() *AccountsResponse {
	return v.value
}

func (v *NullableAccountsResponse) Set(val *AccountsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountsResponse(val *AccountsResponse) *NullableAccountsResponse {
	return &NullableAccountsResponse{value: val, isSet: true}
}

func (v NullableAccountsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


