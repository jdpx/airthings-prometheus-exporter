/*
Airthings for Consumer API

The Airthings for Consumer API provides secure and authorized access for Airthings consumers to retrieve the latest data from their Airthings air quality monitors. Leveraging HTTPS and OAuth for enhanced security, this API empowers users to seamlessly access real-time information from their Airthings devices, gaining valuable insights into the air quality within their environments.

API version: 1.0.0
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airthings

import (
	"encoding/json"
)

// checks if the DevicesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicesResponse{}

// DevicesResponse struct for DevicesResponse
type DevicesResponse struct {
	Devices []DeviceResponse `json:"devices,omitempty"`
}

// NewDevicesResponse instantiates a new DevicesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesResponse() *DevicesResponse {
	this := DevicesResponse{}
	return &this
}

// NewDevicesResponseWithDefaults instantiates a new DevicesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesResponseWithDefaults() *DevicesResponse {
	this := DevicesResponse{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *DevicesResponse) GetDevices() []DeviceResponse {
	if o == nil || IsNil(o.Devices) {
		var ret []DeviceResponse
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesResponse) GetDevicesOk() ([]DeviceResponse, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *DevicesResponse) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []DeviceResponse and assigns it to the Devices field.
func (o *DevicesResponse) SetDevices(v []DeviceResponse) {
	o.Devices = v
}

func (o DevicesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	return toSerialize, nil
}

type NullableDevicesResponse struct {
	value *DevicesResponse
	isSet bool
}

func (v NullableDevicesResponse) Get() *DevicesResponse {
	return v.value
}

func (v *NullableDevicesResponse) Set(val *DevicesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesResponse(val *DevicesResponse) *NullableDevicesResponse {
	return &NullableDevicesResponse{value: val, isSet: true}
}

func (v NullableDevicesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


