/*
Airthings for Consumer API

The Airthings for Consumer API provides secure and authorized access for Airthings consumers to retrieve the latest data from their Airthings air quality monitors. Leveraging HTTPS and OAuth for enhanced security, this API empowers users to seamlessly access real-time information from their Airthings devices, gaining valuable insights into the air quality within their environments.

API version: 1.0.0
Contact: support@airthings.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airthings

import (
	"encoding/json"
)

// checks if the DeviceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceResponse{}

// DeviceResponse struct for DeviceResponse
type DeviceResponse struct {
	SerialNumber *string `json:"serialNumber,omitempty"`
	Home NullableString `json:"home,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Sensors []string `json:"sensors,omitempty"`
}

// NewDeviceResponse instantiates a new DeviceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceResponse() *DeviceResponse {
	this := DeviceResponse{}
	return &this
}

// NewDeviceResponseWithDefaults instantiates a new DeviceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceResponseWithDefaults() *DeviceResponse {
	this := DeviceResponse{}
	return &this
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *DeviceResponse) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceResponse) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *DeviceResponse) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *DeviceResponse) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetHome returns the Home field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceResponse) GetHome() string {
	if o == nil || IsNil(o.Home.Get()) {
		var ret string
		return ret
	}
	return *o.Home.Get()
}

// GetHomeOk returns a tuple with the Home field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceResponse) GetHomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Home.Get(), o.Home.IsSet()
}

// HasHome returns a boolean if a field has been set.
func (o *DeviceResponse) HasHome() bool {
	if o != nil && o.Home.IsSet() {
		return true
	}

	return false
}

// SetHome gets a reference to the given NullableString and assigns it to the Home field.
func (o *DeviceResponse) SetHome(v string) {
	o.Home.Set(&v)
}
// SetHomeNil sets the value for Home to be an explicit nil
func (o *DeviceResponse) SetHomeNil() {
	o.Home.Set(nil)
}

// UnsetHome ensures that no value is present for Home, not even an explicit nil
func (o *DeviceResponse) UnsetHome() {
	o.Home.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceResponse) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DeviceResponse) SetType(v string) {
	o.Type = &v
}

// GetSensors returns the Sensors field value if set, zero value otherwise.
func (o *DeviceResponse) GetSensors() []string {
	if o == nil || IsNil(o.Sensors) {
		var ret []string
		return ret
	}
	return o.Sensors
}

// GetSensorsOk returns a tuple with the Sensors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceResponse) GetSensorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Sensors) {
		return nil, false
	}
	return o.Sensors, true
}

// HasSensors returns a boolean if a field has been set.
func (o *DeviceResponse) HasSensors() bool {
	if o != nil && !IsNil(o.Sensors) {
		return true
	}

	return false
}

// SetSensors gets a reference to the given []string and assigns it to the Sensors field.
func (o *DeviceResponse) SetSensors(v []string) {
	o.Sensors = v
}

func (o DeviceResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if o.Home.IsSet() {
		toSerialize["home"] = o.Home.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Sensors) {
		toSerialize["sensors"] = o.Sensors
	}
	return toSerialize, nil
}

type NullableDeviceResponse struct {
	value *DeviceResponse
	isSet bool
}

func (v NullableDeviceResponse) Get() *DeviceResponse {
	return v.value
}

func (v *NullableDeviceResponse) Set(val *DeviceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceResponse(val *DeviceResponse) *NullableDeviceResponse {
	return &NullableDeviceResponse{value: val, isSet: true}
}

func (v NullableDeviceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


